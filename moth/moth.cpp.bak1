// Scott Wiedemann
// 04/29/2012
// hearding.cpp

#include <math.h>
#include <stdio.h>
#include <vector>
#include <algorithm>

using namespace std;

class Point
{
	public:	
		double x,y;
	
		Point()
		{ }

		Point(const double& A, const double& B)
		{
			x=A;
			y=B;
		}

		Point operator+ (const Point& a) const
		{
			Point result;
			result.x = x+a.x;
			result.y = y+a.y;
			return result;
		}

		Point operator+ (const double& a) const
		{
			Point result;
			result.x = x+a;
			result.y = y+a;
			return result;
		}

		Point operator- (const Point& a) const
		{
			Point result;
			result.x = x-a.x;
			result.y = y-a.y;
			return result;
		}

		Point operator- (const double& a) const
		{
			Point result;
			result.x = x-a;
			result.y = y-a;
			return result;
		}

		Point operator* (const Point& a) const
		{
			Point result;
			result.x = x*a.x;
			result.y = y*a.y;
			return result;
		}

		Point operator* (const double& a) const
		{
			Point result;
			result.x = x*a;
			result.y = y*a;
			return result;
		}

		Point operator/ (const Point& a) const
		{
			Point result;
			result.x = x/a.x;
			result.y = y/a.y;
			return result;
		}

		Point operator/ (const double& a) const
		{
			Point result;
			result.x = x/a;
			result.y = y/a;
			return result;
		}

		double magnitude()
		{
			return sqrt((x*x)+(y*y));
		}

		double cross(const Point& P)
		{
			return x*P.y - y*P.x;
		}

		double dist(const Point& P) {
			return sqrt(((P.x-x)*(P.x-x))+((P.y-y)*(P.y-y)));
		}
};

//is point 3 a left turn or right turn with respect to point 1 and 2?
double ccw(Point p1, Point p2, Point p3) {
	return (p1 - p2).cross(p3 - p2);
}

struct hull_comparator {
	Point r; //reference point
	hull_comparator(Point _r) : r(_r) {}
	bool operator()(const Point a, const Point b) {
		Point amr = a-r; // a minus r
		Point bmr = b-r; // b minus r
		double a_angle_size = Point(1,0).cross(amr) / amr.magnitude();
		double b_angle_size = Point(1,0).cross(bmr) / bmr.magnitude();
		if (a_angle_size != b_angle_size) 
			return a_angle_size < b_angle_size;
		else
			return amr.magnitude() < bmr.magnitude();
	}
};


void findConvexHull(vector<Point>& allPoints, vector<Point>& hull) {
	hull.clear();
	//sort(allPoints.begin(), allPoints.end());
	Point lowest_leftmost = *(allPoints.begin());
	sort(allPoints.begin()+1, allPoints.end(), hull_comparator(lowest_leftmost));
	vector<Point>::iterator i;
	for (i = allPoints.begin(); i != allPoints.begin()+2; i++) hull.push_back(*i);
	for (; i != allPoints.end(); i++) {
		bool done_removing = false;
		while (!done_removing) {
			Point &a = *(hull.end()-2), &b = *(hull.end()-1);
			done_removing = ccw(a,b,*i) >= 0;
			if (!done_removing) {
				hull.pop_back();
			} else { 
				hull.push_back(*i);
			}
		}
	}
}

int lenPoints = 1;

int main() {
	int readReturn;
	int i = 0;
	readReturn = scanf("%d", &lenPoints);
	while(lenPoints > 0) {
		if(i>0) {
			printf("\n");
		}
		i++;
		Point all_Points[10000];
		//printf("number of Points: %i\n", lenPoints);
		for(int j=0; j<lenPoints; j++) {
			readReturn = scanf("%lf", &all_Points[j].x);
			readReturn = scanf("%lf", &all_Points[j].y);
		}

		// find min y index
		int minYIndex = 0;
		for(int j=0; j<lenPoints; j++) {
			if(all_Points[j].y < all_Points[minYIndex].y) {
				minYIndex = j;
			} else if(all_Points[j].y == all_Points[minYIndex].y) {
				// break ties with x-coordinate
				if(all_Points[j].x < all_Points[minYIndex].x) {
					minYIndex = j;
				}
			}
		}
		// swap min y index with 0 index
		Point temp = all_Points[0];
		all_Points[0] = all_Points[minYIndex];
		all_Points[minYIndex] = temp;

		vector<Point> allPoints;
		for(int j=0; j<lenPoints; j++) {
			printf("%.2lf, %.2lf, %i\n", all_Points[j].x, all_Points[j].y, j+1);
			allPoints.push_back(all_Points[j]);
		}

		vector<Point> hull;
		// find the hull
		findConvexHull(allPoints, hull);

		printf("%s%i\n", "Convex hull size:",hull.size());

		for(int j=0; j<hull.size(); j++) {
			printf("(%.1lf,%.1lf)\n", hull.at(j).x, hull.at(j).y);
		}

/*
		int chSize = convexHullIndices.size() -1;
		printf("%s%i%s","Region #",i,":\n");
		double perimeterLength = 0.0;
		printf("(%.1lf,%.1lf)%s", allPoints[convexHullIndices.at(0)].x, allPoints[convexHullIndices.at(0)].y, "-");
		int j=1;
		for(j=chSize; j>0; --j) {
			printf("(%.1lf,%.1lf)%s", allPoints[convexHullIndices.at(j)].x, allPoints[convexHullIndices.at(j)].y, "-");
			perimeterLength += allPoints[convexHullIndices.at(j)].dist(allPoints[convexHullIndices.at(j-1)]);
		}
		perimeterLength += allPoints[convexHullIndices.at(chSize)].dist(allPoints[convexHullIndices.at(0)]);
		printf("(%.1lf,%.1lf)\n", allPoints[convexHullIndices.at(0)].x, allPoints[convexHullIndices.at(0)].y);
		printf("Perimeter length = %.2lf\n", perimeterLength);
*/
		readReturn = scanf("%d", &lenPoints);
	}
	return 0;
}
